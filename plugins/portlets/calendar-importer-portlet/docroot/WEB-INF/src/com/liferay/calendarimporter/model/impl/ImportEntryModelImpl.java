/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.calendarimporter.model.impl;

import com.liferay.calendarimporter.model.ImportEntry;
import com.liferay.calendarimporter.model.ImportEntryModel;
import com.liferay.calendarimporter.model.ImportEntrySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ImportEntry service. Represents a row in the &quot;CI_ImportEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.calendarimporter.model.ImportEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImportEntryImpl}.
 * </p>
 *
 * @author Andrea Di Giorgi
 * @see ImportEntryImpl
 * @see com.liferay.calendarimporter.model.ImportEntry
 * @see com.liferay.calendarimporter.model.ImportEntryModel
 * @generated
 */
@JSON(strict = true)
public class ImportEntryModelImpl extends BaseModelImpl<ImportEntry>
	implements ImportEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a import entry model instance should use the {@link com.liferay.calendarimporter.model.ImportEntry} interface instead.
	 */
	public static final String TABLE_NAME = "CI_ImportEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "importEntryId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "calendarId", Types.BIGINT },
			{ "type_", Types.VARCHAR },
			{ "typeSettings", Types.CLOB },
			{ "importDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table CI_ImportEntry (importEntryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,description STRING null,calendarId LONG,type_ VARCHAR(75) null,typeSettings TEXT null,importDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CI_ImportEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY importEntry.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CI_ImportEntry.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.calendarimporter.model.ImportEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.calendarimporter.model.ImportEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.calendarimporter.model.ImportEntry"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long NAME_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ImportEntry toModel(ImportEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ImportEntry model = new ImportEntryImpl();

		model.setImportEntryId(soapModel.getImportEntryId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setCalendarId(soapModel.getCalendarId());
		model.setType(soapModel.getType());
		model.setTypeSettings(soapModel.getTypeSettings());
		model.setImportDate(soapModel.getImportDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ImportEntry> toModels(ImportEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ImportEntry> models = new ArrayList<ImportEntry>(soapModels.length);

		for (ImportEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.calendarimporter.model.ImportEntry"));

	public ImportEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _importEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setImportEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _importEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ImportEntry.class;
	}

	@Override
	public String getModelClassName() {
		return ImportEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("importEntryId", getImportEntryId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("calendarId", getCalendarId());
		attributes.put("type", getType());
		attributes.put("typeSettings", getTypeSettings());
		attributes.put("importDate", getImportDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long importEntryId = (Long)attributes.get("importEntryId");

		if (importEntryId != null) {
			setImportEntryId(importEntryId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long calendarId = (Long)attributes.get("calendarId");

		if (calendarId != null) {
			setCalendarId(calendarId);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String typeSettings = (String)attributes.get("typeSettings");

		if (typeSettings != null) {
			setTypeSettings(typeSettings);
		}

		Date importDate = (Date)attributes.get("importDate");

		if (importDate != null) {
			setImportDate(importDate);
		}
	}

	@JSON
	@Override
	public long getImportEntryId() {
		return _importEntryId;
	}

	@Override
	public void setImportEntryId(long importEntryId) {
		_importEntryId = importEntryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public long getCalendarId() {
		return _calendarId;
	}

	@Override
	public void setCalendarId(long calendarId) {
		_calendarId = calendarId;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@JSON
	@Override
	public String getTypeSettings() {
		if (_typeSettings == null) {
			return StringPool.BLANK;
		}
		else {
			return _typeSettings;
		}
	}

	@Override
	public void setTypeSettings(String typeSettings) {
		_typeSettings = typeSettings;
	}

	@JSON
	@Override
	public Date getImportDate() {
		return _importDate;
	}

	@Override
	public void setImportDate(Date importDate) {
		_importDate = importDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ImportEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ImportEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ImportEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ImportEntryImpl importEntryImpl = new ImportEntryImpl();

		importEntryImpl.setImportEntryId(getImportEntryId());
		importEntryImpl.setGroupId(getGroupId());
		importEntryImpl.setCompanyId(getCompanyId());
		importEntryImpl.setUserId(getUserId());
		importEntryImpl.setUserName(getUserName());
		importEntryImpl.setCreateDate(getCreateDate());
		importEntryImpl.setModifiedDate(getModifiedDate());
		importEntryImpl.setName(getName());
		importEntryImpl.setDescription(getDescription());
		importEntryImpl.setCalendarId(getCalendarId());
		importEntryImpl.setType(getType());
		importEntryImpl.setTypeSettings(getTypeSettings());
		importEntryImpl.setImportDate(getImportDate());

		importEntryImpl.resetOriginalValues();

		return importEntryImpl;
	}

	@Override
	public int compareTo(ImportEntry importEntry) {
		int value = 0;

		value = getName().compareTo(importEntry.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ImportEntry)) {
			return false;
		}

		ImportEntry importEntry = (ImportEntry)obj;

		long primaryKey = importEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ImportEntryModelImpl importEntryModelImpl = this;

		importEntryModelImpl._originalGroupId = importEntryModelImpl._groupId;

		importEntryModelImpl._setOriginalGroupId = false;

		importEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ImportEntry> toCacheModel() {
		ImportEntryCacheModel importEntryCacheModel = new ImportEntryCacheModel();

		importEntryCacheModel.importEntryId = getImportEntryId();

		importEntryCacheModel.groupId = getGroupId();

		importEntryCacheModel.companyId = getCompanyId();

		importEntryCacheModel.userId = getUserId();

		importEntryCacheModel.userName = getUserName();

		String userName = importEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			importEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			importEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			importEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			importEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			importEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		importEntryCacheModel.name = getName();

		String name = importEntryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			importEntryCacheModel.name = null;
		}

		importEntryCacheModel.description = getDescription();

		String description = importEntryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			importEntryCacheModel.description = null;
		}

		importEntryCacheModel.calendarId = getCalendarId();

		importEntryCacheModel.type = getType();

		String type = importEntryCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			importEntryCacheModel.type = null;
		}

		importEntryCacheModel.typeSettings = getTypeSettings();

		String typeSettings = importEntryCacheModel.typeSettings;

		if ((typeSettings != null) && (typeSettings.length() == 0)) {
			importEntryCacheModel.typeSettings = null;
		}

		Date importDate = getImportDate();

		if (importDate != null) {
			importEntryCacheModel.importDate = importDate.getTime();
		}
		else {
			importEntryCacheModel.importDate = Long.MIN_VALUE;
		}

		return importEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{importEntryId=");
		sb.append(getImportEntryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", calendarId=");
		sb.append(getCalendarId());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", typeSettings=");
		sb.append(getTypeSettings());
		sb.append(", importDate=");
		sb.append(getImportDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.liferay.calendarimporter.model.ImportEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>importEntryId</column-name><column-value><![CDATA[");
		sb.append(getImportEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calendarId</column-name><column-value><![CDATA[");
		sb.append(getCalendarId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeSettings</column-name><column-value><![CDATA[");
		sb.append(getTypeSettings());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importDate</column-name><column-value><![CDATA[");
		sb.append(getImportDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ImportEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ImportEntry.class
		};
	private long _importEntryId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private String _description;
	private long _calendarId;
	private String _type;
	private String _typeSettings;
	private Date _importDate;
	private long _columnBitmask;
	private ImportEntry _escapedModel;
}